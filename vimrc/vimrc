" 需要安装vim-plug
" 需要vim-8.1
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdtree'
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
Plug 'Raimondi/delimitMate'
Plug 'fatih/vim-go'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'tpope/vim-fugitive'

Plug 'easymotion/vim-easymotion'
Plug 'tomasiser/vim-code-dark'
Plug 'logico-ar/typewriter'
Plug 'alvan/vim-indexer'
Plug 'mhinz/vim-signify'
" Colors
" See https://github.com/rafi/awesome-vim-colorschemes
Plug 'ayu-theme/ayu-vim'
Plug 'nightsense/carbonized'
Plug 'wadackel/vim-dogrun'
Plug 'jaredgorski/fogbell.vim'
Plug 'whatyouhide/vim-gotham'
Plug 'fcpg/vim-orbital'
Plug 'rakr/vim-two-firewatch'
Plug 'Yggdroot/indentLine'
Plug 'morhetz/gruvbox'
Plug 'jonathanfilip/vim-lucius'
" Run go get -u github.com/stamblerre/gocode first
Plug 'Shougo/deoplete.nvim'
Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}
Plug 'ludovicchabant/vim-gutentags'
Plug 'hzchirs/vim-material'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'caglartoklu/qbcolor.vim'
Plug 'caglartoklu/borlandp.vim'




call plug#end()
filetype plugin indent on
" 调用glive for vim-codefmt
call glaive#Install()
" 设置代码格式化分配器
augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  " 工作原因取消掉proto的格式化
  " autocmd FileType c,cpp,cc,javascript,proto AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  "autocmd FileType python AutoFormatBuffer yapf
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
augroup END
let g:neocomplete#enable_at_startup = 1
let g:go_def_mode = 'godef'
set t_Co=256
set encoding=UTF-8
set background=light
set termguicolors
let ayucolor="mirage"
" let g:borlandp_bg = "black"
color borlandp
set shiftwidth=4
set tabstop=4
set nu
set cursorcolumn
set cursorline
set expandtab

" 按键映射
let mapleader=","
map <C-n> :NERDTreeToggle<CR>
map <C-g> :GoBuild<CR>
" incsearch
set hlsearch
" inc-search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map <Leader>f <Plug>(easymotion-bd-f)
" indent-line
set list lcs=tab:\|\    
" vim-go autotype
let g:go_auto_type_info = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
" vim-airline
let g:airline_theme='material'
" gruvbox
"
highlight Comment cterm=italic gui=italic
" vim - gutentags
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
map <c-]> g<c-]>
